# Урок 4. Функции высшего порядка, работа с файлами

    # ● Анонимные, lambda-функции
    # ● Функция map
    # ● Функция filter
    # ● Функция zip
    # ● Функция enumerate
    # ● Файлы
    # ● Модуль os
    # ● Модуль shutil

#                                                Анонимные, lambda-функции

# def f(x):
#     return x ** 2
# g = f

# def f(x):
#     return x ** 2
# g = f # g — это переменная, которая хранит в себе ссылку на функцию.
# print(f(4)) # 16
# print(g(4)) # 16 
# # Теперь в контексте этого приложения g может использоваться точно так же, как и f.


# def calk1(a):
#     return a+a

# def calck2(a):
#     return a*a

# def math(op,x): # op — операция, воспринимаем её как отдельную функцию. В примере это либо сумма (sum), либо перемножение(mylt):...далее будет lambda
#     print(op(x))

# math(calck2,5)

#                                                lambda-функции

# def calck2(a):
#     return a*a

# def math(op,x,y):
#     print(op(x,y))

# math(lambda a,b: a*b,7,9)


# 1. В списке хранятся числа. Нужно выбрать только чётные числа и составить список пар
# (число; квадрат числа).
# Пример: 1 2 3 5 8 15 23 38
# Получить: [(2, 4), (8, 64), (38, 1444)]

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# out = []
# for i in data :
#     if i % 2 == 0: # если число целочисленное, делиться без остатка
#         out.append((i, i ** 2)) # выводи само число , и это же число в квадрате.
# print(out)


# Как можно сделать этот код лучше, используя lambda?

# def select(f, col):
#     return [f(x) for x in col]
# # Первая функция возвращает список в котором для каждого элемента приминили функцию f

# def where(f, col):
#     return [x for x in col if f(x)]
# # вторая функция будет возвращать только те значения которые прошли проверку условия f(x)

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res=select(int,data)
# print(res)
# res = where(lambda x: x % 2 == 0, res)
# print(res)
# res = list(select(lambda x: (x, x ** 2), res))# мы вызываем функцию select и говорим что хотим преобразовать ф-ию res 
# print(res)


# #                                                               Функция map
# list_1 = [x for x in range (1,20)]
# print(list_1)
# list_1 = list(map(lambda x: x + 10, list_1 ))# функции map присвоили lambda с условием x + 10
# print(list_1)

# Задача: C клавиатуры вводится некий набор чисел, в качестве разделителя используется
# пробел. Этот набор чисел будет считан в качестве строки. Как превратить list строк в list чисел?

    # 1. Маленькое отступление, функция строка.split() - убирает все пробелы и создаем список из
    # значений строки, пример:
# data = '1 2 3 5 8 15 23 38'
#     # print(data) 
#     # data=data.split()
#     # print(data)
# #   2. Теперь вернемся к задаче. С помощью функции map():
# data=list(map(int, data.split())) # Результат работы map() — это итератор. По итератору можно пробежаться только один раз.
# print(data) 


#                                                               Функция filter

# Функция filter() применяет указанную функцию к каждому элементу итерируемого объекта и
# возвращает итератор с теми объектами, для которых функция вернула True.

# data = [x for x in range(10)]
# print(data)
# res = list(filter(lambda x: x % 2 == 0, data))
# print(res) 

    # Как в данном случае работает функция filter()? Все данные, которые находятся внутри проходят
    # через функцию, которая указана следующим образом:
    # lambda x: x % 2 == 0
    # То есть делает проверка на те числа, которые при делении на 2 дают в остатке 0. Тем самым мы
    # ищем только четные числа. 

# Как можно сделать этот код лучше, используя filter()?
# filter() позволит избавиться от функции where, которую мы писали ранее
# data = '1 2 3 5 8 15 23 38'.split()
# res = map(int, data)
# res = filter(lambda x: x % 2 == 0, res)
# res = list(map(lambda x: (x, x ** 2), res))
# print(res) 


#                                                               Функция zip

# Функция zip() применяется к набору итерируемых объектов и возвращает итерат
# ор с кортежами
# из элементов входных данных

# На выходе получаем набор данных, состоящий из элементов соответствующих
# исходному набору.

# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# print(users)
# ids = [4, 5, 9, 14, 7]
# print(ids)
# data = list(zip(users, ids))
# print(data) 

#       Функция zip () пробегает по минимальному входящему набору:
# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# print(users)
# ids = [4, 5, 9, 14, 7]
# print(ids)
# salary = [111, 222, 333]
# print(salary)
# data = list(zip(users, ids, salary))
# print(data) 

#                                                               Функция enumerate

# Функция enumerate() применяется к итерируемому объекту и возвращает новый итератор с
# кортежами из индекса и элементов входных данных.

# Функция enumerate() позволяет пронумеровать набор данных.

# users = ['user1', 'user2', 'user3']
# print(users)
# data = list(enumerate(users))
# print(data)

#                                                                   Файлы

# Файлы в текстовом формате используются для:
    # ● Хранения данных
    # ● Передачи данных в клиент-серверных проектах
    # ● Хранения конфигов
    # ● Логирования действий
# Что нужно для работы с файлами:
    # 1. Завести переменную, которая будет связана с этим текстовым файлом.
    # 2. Указать путь к файлу.
    # 3. Указать, в каком режиме мы будем работать с файлом

#       Варианты режима (мод):
# a(append) – открытие для добавления данных.
    # ○ Позволяет дописывать что-то в имеющийся файл.
    # ○ Если вы попробуете дописать что-то в несуществующий файл, то файл будет создан и в него начнется запись.

# r (read) – открытие для чтения данных.
    # ○ Позволяет читать данные из файла.
    # ○ Если вы попробуете считать данные из файла, которого не существует, программа
    # выдаст ошибку.

# w – открытие для записи данных.
    # ○ Позволяет записывать данные и создавать файл, если его не существует.


        # Миксованные режимы:
# w+
#     ○ Позволяет открывать файл для записи и читать из него.
#     ○ Если файла не существует, он будет создан.
# r+
#     ○ Позволяет открывать файл для чтения и дописывать в него.
#     ○ Если файла не существует, программа выдаст ошибку

#       Примеры использования различных режимов в коде:

# 1. Режим a

# colors = ['red', 'green', 'blue']
# data = open('file.txt', 'a') # здесь указываем режим, в котором будем работать. Файл создастся
# data.writelines(colors) # Хотим записать в файл данные из списка colors.Разделителей не будет
# data.close()# Т.к файл был открыт, его нужно закрыть.

# data.close() — используется для закрытия файла, чтобы разорвать подключение файловой
# переменной с файлом на диске.
# ● exit() — позволяет не выполнять код, прописанный после этой команды в скрипте.
# ● В итоге создаётся текстовый файл с текстом внутри: redbluedreen.
# ● При повторном выполнении скрипта redbluedreenredbluedreen — добавление в
# существующий файл, а не перезапись файлов.

# #       Ещё один способ записи данных в файл:
# with open('file.txt', 'w') as data:
#     data.write('line 1\n')
#     data.write('line 3\n')

# 2. Режим r

# ● Чтение данных из файла:
# path = 'file.txt'
# data = open('file.txt', 'r')
# for line in data:
#     print(line)
# data.close()

# 3. Режим w
# ● В итоге создаётся текстовый файл с текстом внутри: ‘redbluedreen’.
# ● В случае перезаписи новые данные записываются, а старые удаляются.

# colors = ['red', 'green', 'blue']
# data = open('file.txt', 'w')
# data.writelines(colors) # разделителей не будет
# data.close()


#                                                                   Модуль os

# Модуль os предоставляет множество функций для работы с операционной системой, причем их
# поведение, как правило, не зависит от ОС, поэтому программы остаются переносимыми.
# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою
# программу:
# import os
# Познакомимся с базовыми функциями данного модуля:

# os.chdir(path) - смена текущей директории.
# import os
# os.chdir('C:/Users/79190/PycharmProjects/GB')

# ● os.getcwd() - текущая рабочая директория
# import os
# print(os.getcwd())

# ● os.path - является вложенным модулем в модуль os и реализует некоторые полезные функции для работы с
# путями, такие как:

# ○ os.path.basename(path) - базовое имя пути
# import os
# print(os.path.basename('C:/Users/79190/PycharmProjects/webproject/main.py')) #  #'main.py'

# os.path.abspath(path) - возвращает нормализованный абсолютный путь.
# import os
# print(os.path.abspath('main.py')) # 'C:/Users/79190/PycharmProjects/webproject/main.py'

#                                                               Модуль shutil

# Модуль shutil содержит набор функций высокого уровня для обработки файлов, групп файлов, и папок. В частности,
# доступные здесь функции позволяют копировать, перемещать и удалять файлы и папки. Часто используется вместе
# с модулем os.
# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою программу:
#   import shutil
# Познакомимся с базовыми функциями данного модуля:
# ● shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла src в файл dst.
# ● shutil.copy(src, dst) - копирует содержимое файла src в файл или папку dst.
# ● shutil.rmtree(path) - Удаляет текущую директорию и все поддиректории; path должен указывать на
# директорию, а не на символическую ссылку